#############################################
# Aliases for simple moves
#############################################
alias gup=". gitsetup.sh"                     # Run startup script with 'gup': https://github.com/technicalities/comfy-git/blob/master/myBash/gitsetup.sh
alias gitbr="printf '\n' && git branch -v"
alias goma="git checkout master"
alias goback="git checkout @{-1}"
alias gotest="git checkout testing"
alias gitpl="git pull origin master"

# Prep
alias gist="git status -s"
alias gistv="git status -v -b"
alias gdf="git diff --ignore-space-change"
alias gdfs="git diff --staged --ignore-space-change"
alias gitlast="git diff HEAD^ HEAD"
alias gitchanged="git log --name-status HEAD^..HEAD"
alias githead="git rev-parse HEAD | GREP_COLORS='ms=34;1' grep $(git rev-parse --short=0 HEAD)"
alias gitmod="git add ."

# I don't like the git diff view or kdiff: syntaxify. Open with "pipe".
alias pipephp="echo '<?php' > 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php';
                git diff --ignore-space-change >> 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php'"

# Emergency
alias gitboo="git blame --"

# Catch typos
alias gt='git '
alias gits='gist'
alias gitsv='gistv'
alias gitst='gist'
alias gitstv='gistv'
alias gtstv='gistv'
alias gtsvt='gistv'
alias gitsvt='gistv'
alias gfd='gdf'
alias gfds="gdfs"
alias gfsd="gdfs"

# Atom shortcuts
alias scratch="atom '\\Current_commit.txt' &"
alias bashrc="atom ~/.bashrc &"
alias gitconfig="atom '\\.gitconfig' &"
alias snippets="atom '\\snippets.cson' &"
alias pipe="atom '\\new_diff.php' &"

#############################################
# Functions
#############################################

# Confirmation prompt before serious commands
confirm () {
    read -r -p "${1:-Are you sure about that? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true ;;
        *)
            echo "Command not executed. Type 'y' next time"
            false ;;
    esac
}

# Check 0-9:
confirmInt () {
    case $1 in [0-9]) 
            true ;;
        *)
            echo "Command not executed. Type a single digit next time"
            false ;;
    esac
}

# Add all unstaged and untracked changes:
gitall () {
    confirm 'The kitchen sink?' && git add --all
}

# Commit with editor popup
gitco () {
    confirm 'Have you removed all traces?' && git commit
}

# Inline commit. $1 is the commit msg
gitcom () {
    confirm 'Have you removed all traces?' && git commit -m $1   
}

# Start a new branch off master, ensuring it's current. Pass branch name.
gitnew () {
    confirm 'Update master and branch off it?' && goma && gitpl && git checkout -b $1
}

# Merge master into current:
gitmerma () {
    confirm 'Have you committed all yr new changes?' && git merge master
}

# Push current to origin:
gitps () {
    confirm 'Everyone will see this' && git push origin HEAD
}

# Send the diff to a php marked-up file. Open with 'pipe'
gitpipe () {
    echo '<?php' > 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php'; 
    git diff --ignore-space-change >> 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php'
}

# Reset all staged changes to last commit state
gitaarrgg () {
    confirm 'Destroy all staged changes?';
    git reset --hard HEAD    
}

# Checkout all unstaged changes to last commit state
gitwipe () {
    confirm 'Wipe all unstaged changes?' && git checkout -- .
}

# Merge the last $1 commits into one commit with message $2:
gitsquash () {
    confirmInt $1 &&
    confirm "Merge the last $1 commits?" && 
    git reset --soft HEAD~$1 &&
    git commit -m $2
}

# Startup, choose your default bash wd:
# moveHome() { 
    # cd 'C:\\Users\\gavin.leech\\'
# }
# moveHome
# export HOME='C:\\Users\\gavin.leech\\'


# NOW source ~/.bashrc
