#############################################
# Aliases for simple moves
#############################################
alias gup=". git.sh"
alias gitbr="printf '\n' && git branch -v"
alias goma="git checkout master"
alias goback="git checkout @{-1}"
alias gotest="git checkout testing"
alias gitpl="git pull origin master"

# Prep
alias gist="git status -s"
alias gistv="git status -v -b"
alias gdf="git diff --ignore-space-change"
alias gdfs="git diff --staged --ignore-space-change"
alias gitlast="git diff HEAD^ HEAD"
alias gitchanged="git log --name-status HEAD^..HEAD"
alias githead="git rev-parse HEAD | GREP_COLORS='ms=34;1' grep $(git rev-parse --short=0 HEAD)"
alias gitmod="git add ."

## Full functions, see section below
# gitall ()   # Add all unstaged and untracked changes:
# gitco ()    # Commit with editor popup
# gitcom ()   # Inline commit. $1 is the commit msg
# gitnew ()   # Start a new branch off master, ensuring it's current. 
# gitmerma () # Merge master into current:
# gitmerhelp () # Merge conflicts standard procedure
# gitps ()    # Push current to origin:
# gitpipe ()  # Send the diff to a php marked-up file. Open with 'pipe'
# gitaarrgg() # Reset all staged changes to last commit state
# gitwipe ()  # Checkout all unstaged changes to last commit state
# gitsquash() # Merge the last $1 commits into one commit :

# Catch typos
alias gt='git '
alias gtbr='gitbr'
alias gits='gist' 
alias gitsv='gistv' 
alias gitst='gist' 
alias gitstv='gistv' 
alias gtstv='gistv'
alias gtsvt='gistv'
alias gitsvt='gistv'
alias gddf='gdf'
alias gfd='gdf'
alias gfds="gdfs"
alias gfsd="gdfs"

# Atom shortcuts
alias albums="atom 'C:\\Users\\gla\\Tooling around\\albums.md' &"
alias scratch="atom 'C:\\Users\\gla\\Desktop\\Current_commit.txt' &"
alias bashrc="atom ~/.bashrc &"
alias sobash="source ~/.bashrc"     # much shortcut
alias gitignore="atom 'C:\\Users\\gla\\Documents\freetobook\\.gitignore' &"
alias gitconf="atom 'C:\\Users\\gla\\.gitconfig' &"
alias snippets="atom 'C:\\Users\\gla\\.atom\\snippets.cson' &"
alias lepipe="atom 'C:\\Users\\gla\\Desktop\\new_diff.php' &"


#############################################
# Functions
#############################################
# These are as much personal docs of standard procedure as they are shortcuts

# Confirmation prompt before serious commands
confirm () {
    read -r -p "${1:-Are you sure about that? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY]) 
            true ;;
        *)
            echo "Command not executed. Type 'y' next time"
            false ;;
    esac
}

# Check 0-9:
confirmInt () {
    case $1 in [0-9]) 
            true ;;
        *)
            echo "Command not executed. Type a single digit next time"
            false ;;
    esac
}

# Check $1 > 1
confirmPlural () {
    if [[ ! $1 -gt 1 ]]
        then echo "Doesn't make sense to squash one commit into itself"
        false
    else
        true
    fi
}

checkNoTraces () {
    case $1 in [pP][hH][pP])
        logString='error_log' ;;
    [jJ][sS])
        logString='console.log' ;;
    *)
        read -r -p "Specify a language: " response
        checkNoTraces $response
    esac
    
    if [[ ! -z $(git diff --staged -G$logString) ]]
        then read -r -p "There are traces in the diff! Is that intentional?" response
            case $response in [yY][eE][sS]|[yY]) 
                true ;;
            *)
                false ;;
            esac
    else true
    fi
}

# Add all unstaged and untracked changes:
gitall () {
    confirm 'The kitchen sink?' && git add --all
}

# Commit with editor popup. #1 is project language.
gitco () {
    if [[ -z $1 ]]
        then lang='PHP'
    else
        lang=$1
    fi
    checkNoTraces $lang && 
    git commit
}

# Inline commit. $1 is the commit msg
gitcom () {
    if [[ -z $2 ]]
        then lang='PHP'
    else
        lang=$2
    fi
    checkNoTraces $lang && 
    git commit -m "$1"
}

# Rename current branch to name $1
gitrename () {
    current=$(git rev-parse --abbrev-ref HEAD)
    confirm "Rename branch $current to $1?" && git branch -m "$current" "$1"
}

# Start a new branch off master, ensuring it's current. Pass branch name.
gitnew () {
    if [[ -z $1 ]]
        then read -r -p "Name new branch: " response
             name=$response
    else
        name=$1
    fi
    
    confirm 'Update master and branch off it?' && 
    goma && gitpl && git checkout -b $name
}

# Merge master into current:
gitmerma () {
    confirm 'Have you committed all yr new changes?' &&
    goma && gitpl && goback && 
    git merge master
}

# Standard procedure for dealing with merge conflicts: 
mergetool () {
    git mergetool &&        # and investigate
    echo "\n\n***\nUse 'git clean -f' to rid yourself of these:" && 
    git clean -f -n         # and look at those orig backups
}

# Push current to origin:
gitps () {
    confirm 'Everyone will see this' && git push origin HEAD
}

# Send the diff to a php marked-up file. Open with 'pipe'
gitpipe () {
    echo '<?php' > 'C:\\Users\\gla\\Desktop\\new_diff.php'; 
    git diff --ignore-space-change >> 'C:\\Users\\gla\\Desktop\\new_diff.php'
}

# Reset all staged changes to last commit state
gitaarrgg () {
    confirm 'Destroy all staged changes?' &&
    git reset --hard HEAD    
}

# Checkout all unstaged changes to last commit state
gitwipe () {
    confirm 'Wipe all unstaged changes?' && git checkout -- .
}

# Merge the last $1 commits into one commit with msg $2 :
gitsquash () {        
    confirmInt $1 && confirmPlural $1 &&
    confirm "Merge the previous $1 commits?" &&
    git reset --soft HEAD~$1 &&
    
    # Check if a string was entered as $2 for comtmsg:
    if [[ ! -z "$2" ]]
        then git commit -m "$2"
    else 
        read -r -p "Go on, enter a commit message then: " response
        git commit -m "$response"
    fi
}


# NOW source ~/.bashrc
