# Startup
alias gup=". gitsetup.sh"         # Run startup script with 'gup':
alias goma="git checkout master"
alias goback="git checkout @{-1}"
alias gitnew="git checkout -b"
alias gitpu="git pull origin"

# Prep
alias gist="git status -s"
alias gistv="git status -v -b"
alias gdf="git diff --ignore-space-change"
alias gdfs="git diff --staged --ignore-space-change"
alias gitbr="git branch -v"
alias gitmod="git add ."

# I don't like the git diff view or kdiff:
alias pipephp="echo '<?php' > 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php';
                git diff --ignore-space-change >> 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php'"

# Emergency
alias gitboo="git blame --"

# Catch typos
alias gt='git '
alias gits='gist'
alias gitsv='gistv'
alias gitst='gist'
alias gitstv='gistv'
alias gtstv='gistv'
alias gtsvt='gistv'
alias gitsvt='gistv'
alias gfd='gdf'
alias gfds="gdfs"
alias gfsd="gdfs"

# Atom shortcuts
alias scratch="atom '\\Current_commit.txt'"
alias bashrc="atom ~/.bashrc"
alias gitconfig="atom '\\.gitconfig'"
alias snippets="atom '\\snippets.cson'"
alias pipe="atom '\\new_diff.php'"


confirm () {
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            echo "Command not executed."
            ;;
    esac
}

gitall () {
  confirm 'Add the kitchen sink?' && git add --all
}

# Commit
gitco () {
    confirm 'Have you removed all traces?' && git commit
}

# Merge master into current:
gitmerma () {
    confirm 'Have you committed all yr new changes?' && git merge master
}

# Push current to origin:
gitps () {
    confirm 'Everyone will see this you know' && git push origin HEAD
}

# Send the diff to a php marked-up file. Open with 'pipe'
gitpipe () {
    echo '<?php' > 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php'; 
    git diff --ignore-space-change >> 'C:\\Users\\gavin.leech\\Desktop\\new_diff.php'
}

# Reset all staged changes to last commit state
gitaarrgg () {
    confirm 'Destroy all staged changes?';
    git reset --hard HEAD    
}

# Checkout all unstaged changes to last commit state
gitwipe () {
    confirm 'Wipe all unstaged changes?' && git checkout -- .
}


# NOW source ~/.bashrc
